# coding: utf-8

"""
    SERTONE REST API

    This is the SERTONE REST API server for the  Sertone IOT Developers.  You can find out more about IOT at [http://www.sertone.com](http://www.sertone.com) or about the API on [API Reference](http://dev.sertone.com/public-rest-api).

    OpenAPI spec version: 0.0.1
    Contact: email@sertone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class GatewaysStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, gateway_eui=None, gateway_activity=None, last_pull_data=None, last_push_data=None, pull_data_count=None, push_data_count=None):
        """
        GatewaysStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'gateway_eui': 'str',
            'gateway_activity': 'str',
            'last_pull_data': 'str',
            'last_push_data': 'str',
            'pull_data_count': 'str',
            'push_data_count': 'str'
        }

        self.attribute_map = {
            'gateway_eui': 'gateway_eui',
            'gateway_activity': 'gateway_activity',
            'last_pull_data': 'last_pull_data',
            'last_push_data': 'last_push_data',
            'pull_data_count': 'pull_data_count',
            'push_data_count': 'push_data_count'
        }

        self._gateway_eui = gateway_eui
        self._gateway_activity = gateway_activity
        self._last_pull_data = last_pull_data
        self._last_push_data = last_push_data
        self._pull_data_count = pull_data_count
        self._push_data_count = push_data_count

    @property
    def gateway_eui(self):
        """
        Gets the gateway_eui of this GatewaysStatus.


        :return: The gateway_eui of this GatewaysStatus.
        :rtype: str
        """
        return self._gateway_eui

    @gateway_eui.setter
    def gateway_eui(self, gateway_eui):
        """
        Sets the gateway_eui of this GatewaysStatus.


        :param gateway_eui: The gateway_eui of this GatewaysStatus.
        :type: str
        """

        self._gateway_eui = gateway_eui

    @property
    def gateway_activity(self):
        """
        Gets the gateway_activity of this GatewaysStatus.
        Gateway activity can be Active, Inactive, Not Found

        :return: The gateway_activity of this GatewaysStatus.
        :rtype: str
        """
        return self._gateway_activity

    @gateway_activity.setter
    def gateway_activity(self, gateway_activity):
        """
        Sets the gateway_activity of this GatewaysStatus.
        Gateway activity can be Active, Inactive, Not Found

        :param gateway_activity: The gateway_activity of this GatewaysStatus.
        :type: str
        """

        self._gateway_activity = gateway_activity

    @property
    def last_pull_data(self):
        """
        Gets the last_pull_data of this GatewaysStatus.


        :return: The last_pull_data of this GatewaysStatus.
        :rtype: str
        """
        return self._last_pull_data

    @last_pull_data.setter
    def last_pull_data(self, last_pull_data):
        """
        Sets the last_pull_data of this GatewaysStatus.


        :param last_pull_data: The last_pull_data of this GatewaysStatus.
        :type: str
        """

        self._last_pull_data = last_pull_data

    @property
    def last_push_data(self):
        """
        Gets the last_push_data of this GatewaysStatus.


        :return: The last_push_data of this GatewaysStatus.
        :rtype: str
        """
        return self._last_push_data

    @last_push_data.setter
    def last_push_data(self, last_push_data):
        """
        Sets the last_push_data of this GatewaysStatus.


        :param last_push_data: The last_push_data of this GatewaysStatus.
        :type: str
        """

        self._last_push_data = last_push_data

    @property
    def pull_data_count(self):
        """
        Gets the pull_data_count of this GatewaysStatus.


        :return: The pull_data_count of this GatewaysStatus.
        :rtype: str
        """
        return self._pull_data_count

    @pull_data_count.setter
    def pull_data_count(self, pull_data_count):
        """
        Sets the pull_data_count of this GatewaysStatus.


        :param pull_data_count: The pull_data_count of this GatewaysStatus.
        :type: str
        """

        self._pull_data_count = pull_data_count

    @property
    def push_data_count(self):
        """
        Gets the push_data_count of this GatewaysStatus.


        :return: The push_data_count of this GatewaysStatus.
        :rtype: str
        """
        return self._push_data_count

    @push_data_count.setter
    def push_data_count(self, push_data_count):
        """
        Sets the push_data_count of this GatewaysStatus.


        :param push_data_count: The push_data_count of this GatewaysStatus.
        :type: str
        """

        self._push_data_count = push_data_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
