// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if source is T {
            return source as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [Applications]
            Decoders.addDecoder(clazz: [Applications].self) { (source: AnyObject) -> [Applications] in
                return Decoders.decode(clazz: [Applications].self, source: source)
            }
            // Decoder for Applications
            Decoders.addDecoder(clazz: Applications.self) { (source: AnyObject) -> Applications in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Applications()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.appEui = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appEui"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.owner = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner"])
                instance.accessKeys = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessKeys"])
                instance.valid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["valid"])
                return instance
            }


            // Decoder for [DataPayload]
            Decoders.addDecoder(clazz: [DataPayload].self) { (source: AnyObject) -> [DataPayload] in
                return Decoders.decode(clazz: [DataPayload].self, source: source)
            }
            // Decoder for DataPayload
            Decoders.addDecoder(clazz: DataPayload.self) { (source: AnyObject) -> DataPayload in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DataPayload()
                instance.devEui = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["devEui"])
                instance.appEui = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appEui"])
                instance.seqNum = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["seqNum"])
                instance.lastDataReceived = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastDataReceived"])
                instance.payload = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["payload"])
                return instance
            }


            // Decoder for [Gateways]
            Decoders.addDecoder(clazz: [Gateways].self) { (source: AnyObject) -> [Gateways] in
                return Decoders.decode(clazz: [Gateways].self, source: source)
            }
            // Decoder for Gateways
            Decoders.addDecoder(clazz: Gateways.self) { (source: AnyObject) -> Gateways in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Gateways()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.owner = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner"])
                instance.gatewayEui = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gateway_eui"])
                instance.gatewayStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gateway_status"])
                instance.longitude = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["longitude"])
                instance.latitude = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latitude"])
                instance.altitude = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["altitude"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.baseModel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["base_model"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.concentrator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["concentrator"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.freqPlan = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["freq_plan"])
                instance.region = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["region"])
                instance.relCustomerUid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rel_customer_uid"])
                instance.gatewayTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gateway_title"])
                instance.zipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip_code"])
                instance.createdOn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created_on"])
                return instance
            }


            // Decoder for [GatewaysStatus]
            Decoders.addDecoder(clazz: [GatewaysStatus].self) { (source: AnyObject) -> [GatewaysStatus] in
                return Decoders.decode(clazz: [GatewaysStatus].self, source: source)
            }
            // Decoder for GatewaysStatus
            Decoders.addDecoder(clazz: GatewaysStatus.self) { (source: AnyObject) -> GatewaysStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GatewaysStatus()
                instance.gatewayEui = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gateway_eui"])
                instance.gatewayActivity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gateway_activity"])
                instance.lastPullData = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_pull_data"])
                instance.lastPushData = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_push_data"])
                instance.pullDataCount = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pull_data_count"])
                instance.pushDataCount = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["push_data_count"])
                return instance
            }


            // Decoder for [NodeInfo]
            Decoders.addDecoder(clazz: [NodeInfo].self) { (source: AnyObject) -> [NodeInfo] in
                return Decoders.decode(clazz: [NodeInfo].self, source: source)
            }
            // Decoder for NodeInfo
            Decoders.addDecoder(clazz: NodeInfo.self) { (source: AnyObject) -> NodeInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NodeInfo()
                instance.regType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["regType"])
                instance.devEui = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["devEui"])
                instance.appEui = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appEui"])
                instance.appKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appKey"])
                instance.appSKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appSKey"])
                instance.devAddr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["devAddr"])
                instance.nwkSKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nwkSKey"])
                instance.fcntUp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["fcntUp"])
                instance.fcntDown = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["fcntDown"])
                instance.flags = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flags"])
                instance.activated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["activated"])
                return instance
            }


            // Decoder for [Nodes]
            Decoders.addDecoder(clazz: [Nodes].self) { (source: AnyObject) -> [Nodes] in
                return Decoders.decode(clazz: [Nodes].self, source: source)
            }
            // Decoder for Nodes
            Decoders.addDecoder(clazz: Nodes.self) { (source: AnyObject) -> Nodes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Nodes()
                instance.regType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["regType"])
                instance.devEui = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["devEui"])
                instance.appEui = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appEui"])
                instance.appKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appKey"])
                instance.appSKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appSKey"])
                instance.devAddr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["devAddr"])
                instance.nwkSKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nwkSKey"])
                instance.fcntUp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["fcntUp"])
                instance.fcntDown = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["fcntDown"])
                instance.flags = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flags"])
                return instance
            }
        }
    }
}
