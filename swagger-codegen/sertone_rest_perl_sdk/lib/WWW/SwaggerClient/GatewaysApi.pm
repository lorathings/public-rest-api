=begin comment

SERTONE REST API

This is the SERTONE REST API server for the  Sertone IOT Developers.  You can find out more about IOT at [http://www.sertone.com](http://www.sertone.com) or about the API on [API Reference](http://dev.sertone.com/public-rest-api).

OpenAPI spec version: 0.0.1
Contact: email@sertone.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::GatewaysApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# get_gateway_status
#
# getGatewayStatus() - Gets current status of gateway.
# 
# @param string $gw_eui The gatewayId to be retrieved (required)
{
    my $params = {
    'gw_eui' => {
        data_type => 'string',
        description => 'The gatewayId to be retrieved',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ get_gateway_status } = { 
    	summary => 'getGatewayStatus() - Gets current status of gateway.',
        params => $params,
        returns => 'GatewaysStatus',
        };
}
# @return GatewaysStatus
#
sub get_gateway_status {
    my ($self, %args) = @_;

    # verify the required parameter 'gw_eui' is set
    unless (exists $args{'gw_eui'}) {
      croak("Missing the required parameter 'gw_eui' when calling get_gateway_status");
    }

    # parse inputs
    my $_resource_path = '/gateways/{gwEui}/status';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/xml', 'application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/xml', 'application/json');

    # path params
    if ( exists $args{'gw_eui'}) {
        my $_base_variable = "{" . "gwEui" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'gw_eui'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(server_token client_id )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GatewaysStatus', $response);
    return $_response_object;
}

#
# get_gateways_by_user_id
#
# getGatewaysByUserId() - Gets all gateways owned by given user.
# 
# @param string $user_id The userId whom to get owned gateways (required)
{
    my $params = {
    'user_id' => {
        data_type => 'string',
        description => 'The userId whom to get owned gateways',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ get_gateways_by_user_id } = { 
    	summary => 'getGatewaysByUserId() - Gets all gateways owned by given user.',
        params => $params,
        returns => 'ARRAY[Gateways]',
        };
}
# @return ARRAY[Gateways]
#
sub get_gateways_by_user_id {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_gateways_by_user_id");
    }

    # parse inputs
    my $_resource_path = '/users/{userId}/gateways';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/xml', 'application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/xml', 'application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "userId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(server_token client_id )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Gateways]', $response);
    return $_response_object;
}

1;
