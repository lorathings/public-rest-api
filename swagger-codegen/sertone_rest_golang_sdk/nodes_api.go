/* 
 * SERTONE REST API
 *
 * This is the SERTONE REST API server for the  Sertone IOT Developers.  You can find out more about IOT at [http://www.sertone.com](http://www.sertone.com) or about the API on [API Reference](http://dev.sertone.com/public-rest-api).
 *
 * OpenAPI spec version: 0.0.1
 * Contact: email@sertone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"strings"
	"fmt"
	"errors"
	"net/url"
	"encoding/json"
)

type NodesApi struct {
	Configuration Configuration
}

func NewNodesApi() *NodesApi {
	configuration := NewConfiguration()
	return &NodesApi{
		Configuration: *configuration,
	}
}

func NewNodesApiWithBasePath(basePath string) *NodesApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &NodesApi{
		Configuration: *configuration,
	}
}

/**
 * getNodesByUserId() - Gets all nodes owned by given user.
 * 
 *
 * @param userId The userId whom to get owned nodes
 * @return []Nodes
 */
func (a NodesApi) GetNodesByUserId(userId string) ([]Nodes, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/users/{userId}/nodes"
	path = strings.Replace(path, "{"+"userId"+"}", fmt.Sprintf("%v", userId), -1)

	// verify the required parameter 'userId' is set
	if &userId == nil {
		return new([]Nodes), nil, errors.New("Missing required parameter 'userId' when calling NodesApi->GetNodesByUserId")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// authentication (server_token) required

	// set key with prefix in header
	headerParams["Authorization"] = a.Configuration.GetAPIKeyWithPrefix("Authorization")
	// authentication (client_id) required

	// set key with prefix in header
	headerParams["ClientID"] = a.Configuration.GetAPIKeyWithPrefix("ClientID")

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/xml", "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/xml",
"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new([]Nodes)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return *successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return *successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * getNodesByUserIdAndSensorId() - Gets details of given node ID for this given user.
 * 
 *
 * @param userId The userId where node will be retrieved
 * @param devEui The sensorID to be retrieved
 * @return *NodeInfo
 */
func (a NodesApi) GetNodesByUserIdAndSensorId(userId string, devEui string) (*NodeInfo, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/users/{userId}/nodes/{devEui}"
	path = strings.Replace(path, "{"+"userId"+"}", fmt.Sprintf("%v", userId), -1)
	path = strings.Replace(path, "{"+"devEui"+"}", fmt.Sprintf("%v", devEui), -1)

	// verify the required parameter 'userId' is set
	if &userId == nil {
		return new(NodeInfo), nil, errors.New("Missing required parameter 'userId' when calling NodesApi->GetNodesByUserIdAndSensorId")
	}
	// verify the required parameter 'devEui' is set
	if &devEui == nil {
		return new(NodeInfo), nil, errors.New("Missing required parameter 'devEui' when calling NodesApi->GetNodesByUserIdAndSensorId")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// authentication (server_token) required

	// set key with prefix in header
	headerParams["Authorization"] = a.Configuration.GetAPIKeyWithPrefix("Authorization")
	// authentication (client_id) required

	// set key with prefix in header
	headerParams["ClientID"] = a.Configuration.GetAPIKeyWithPrefix("ClientID")

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/xml", "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/xml",
"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(NodeInfo)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

