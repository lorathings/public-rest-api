/**
 * SERTONE REST API
 * This is the SERTONE REST API server for the  Sertone IOT Developers.  You can find out more about IOT at [http://www.sertone.com](http://www.sertone.com) or about the API on [API Reference](http://dev.sertone.com/public-rest-api).
 *
 * OpenAPI spec version: 0.0.1
 * Contact: email@sertone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Applications', 'model/DataPayload', 'model/Gateways', 'model/GatewaysStatus', 'model/NodeInfo', 'model/Nodes', 'api/ApplicationsApi', 'api/DataApi', 'api/GatewaysApi', 'api/NodesApi', 'api/SystemApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Applications'), require('./model/DataPayload'), require('./model/Gateways'), require('./model/GatewaysStatus'), require('./model/NodeInfo'), require('./model/Nodes'), require('./api/ApplicationsApi'), require('./api/DataApi'), require('./api/GatewaysApi'), require('./api/NodesApi'), require('./api/SystemApi'));
  }
}(function(ApiClient, Applications, DataPayload, Gateways, GatewaysStatus, NodeInfo, Nodes, ApplicationsApi, DataApi, GatewaysApi, NodesApi, SystemApi) {
  'use strict';

  /**
   * This is the SERTONE REST API server for the  Sertone IOT Developers.  You can find out more about IOT at [http://www.sertone.com](http://www.sertone.com) or about the API on [API Reference](http://dev.sertone.com/public-rest-api)..<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var SertoneRestApi = require('index'); // See note below*.
   * var xxxSvc = new SertoneRestApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new SertoneRestApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new SertoneRestApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new SertoneRestApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.0.1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Applications model constructor.
     * @property {module:model/Applications}
     */
    Applications: Applications,
    /**
     * The DataPayload model constructor.
     * @property {module:model/DataPayload}
     */
    DataPayload: DataPayload,
    /**
     * The Gateways model constructor.
     * @property {module:model/Gateways}
     */
    Gateways: Gateways,
    /**
     * The GatewaysStatus model constructor.
     * @property {module:model/GatewaysStatus}
     */
    GatewaysStatus: GatewaysStatus,
    /**
     * The NodeInfo model constructor.
     * @property {module:model/NodeInfo}
     */
    NodeInfo: NodeInfo,
    /**
     * The Nodes model constructor.
     * @property {module:model/Nodes}
     */
    Nodes: Nodes,
    /**
     * The ApplicationsApi service constructor.
     * @property {module:api/ApplicationsApi}
     */
    ApplicationsApi: ApplicationsApi,
    /**
     * The DataApi service constructor.
     * @property {module:api/DataApi}
     */
    DataApi: DataApi,
    /**
     * The GatewaysApi service constructor.
     * @property {module:api/GatewaysApi}
     */
    GatewaysApi: GatewaysApi,
    /**
     * The NodesApi service constructor.
     * @property {module:api/NodesApi}
     */
    NodesApi: NodesApi,
    /**
     * The SystemApi service constructor.
     * @property {module:api/SystemApi}
     */
    SystemApi: SystemApi
  };

  return exports;
}));
