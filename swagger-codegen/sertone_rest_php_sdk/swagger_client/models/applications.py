# coding: utf-8

"""
    SERTONE REST API

    This is the SERTONE REST API server for the  Sertone IOT Developers.  You can find out more about IOT at [http://www.sertone.com](http://www.sertone.com) or about the API on [API Reference](http://dev.sertone.com/public-rest-api).

    OpenAPI spec version: 0.0.1
    Contact: email@sertone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Applications(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, app_eui=None, name=None, owner=None, access_keys=None, valid=None):
        """
        Applications - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'app_eui': 'str',
            'name': 'str',
            'owner': 'str',
            'access_keys': 'str',
            'valid': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'app_eui': 'appEui',
            'name': 'name',
            'owner': 'owner',
            'access_keys': 'accessKeys',
            'valid': 'valid'
        }

        self._id = id
        self._app_eui = app_eui
        self._name = name
        self._owner = owner
        self._access_keys = access_keys
        self._valid = valid

    @property
    def id(self):
        """
        Gets the id of this Applications.


        :return: The id of this Applications.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Applications.


        :param id: The id of this Applications.
        :type: int
        """

        self._id = id

    @property
    def app_eui(self):
        """
        Gets the app_eui of this Applications.


        :return: The app_eui of this Applications.
        :rtype: str
        """
        return self._app_eui

    @app_eui.setter
    def app_eui(self, app_eui):
        """
        Sets the app_eui of this Applications.


        :param app_eui: The app_eui of this Applications.
        :type: str
        """

        self._app_eui = app_eui

    @property
    def name(self):
        """
        Gets the name of this Applications.
        Name or Title of the application

        :return: The name of this Applications.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Applications.
        Name or Title of the application

        :param name: The name of this Applications.
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """
        Gets the owner of this Applications.


        :return: The owner of this Applications.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this Applications.


        :param owner: The owner of this Applications.
        :type: str
        """

        self._owner = owner

    @property
    def access_keys(self):
        """
        Gets the access_keys of this Applications.


        :return: The access_keys of this Applications.
        :rtype: str
        """
        return self._access_keys

    @access_keys.setter
    def access_keys(self, access_keys):
        """
        Sets the access_keys of this Applications.


        :param access_keys: The access_keys of this Applications.
        :type: str
        """

        self._access_keys = access_keys

    @property
    def valid(self):
        """
        Gets the valid of this Applications.


        :return: The valid of this Applications.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """
        Sets the valid of this Applications.


        :param valid: The valid of this Applications.
        :type: bool
        """

        self._valid = valid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
