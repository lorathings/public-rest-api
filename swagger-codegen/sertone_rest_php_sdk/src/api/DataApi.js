/**
 * SERTONE REST API
 * This is the SERTONE REST API server for the  Sertone IOT Developers.  You can find out more about IOT at [http://www.sertone.com](http://www.sertone.com) or about the API on [API Reference](http://dev.sertone.com/public-rest-api).
 *
 * OpenAPI spec version: 0.0.1
 * Contact: email@sertone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DataPayload'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DataPayload'));
  } else {
    // Browser globals (root is window)
    if (!root.SertoneRestApi) {
      root.SertoneRestApi = {};
    }
    root.SertoneRestApi.DataApi = factory(root.SertoneRestApi.ApiClient, root.SertoneRestApi.DataPayload);
  }
}(this, function(ApiClient, DataPayload) {
  'use strict';

  /**
   * Data service.
   * @module api/DataApi
   * @version 0.0.1
   */

  /**
   * Constructs a new DataApi. 
   * @alias module:api/DataApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAppDevDataPayload operation.
     * @callback module:api/DataApi~getAppDevDataPayloadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataPayload>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAppDevDataPayload() - Gets payload data of given application and device.
     * This can only be done by the logged in users.
     * @param {String} appEui The appEui where payload will be retrieved
     * @param {String} devEui The devEui where payload will be retrieved
     * @param {module:api/DataApi~getAppDevDataPayloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/DataPayload>}
     */
    this.getAppDevDataPayload = function(appEui, devEui, callback) {
      var postBody = null;

      // verify the required parameter 'appEui' is set
      if (appEui == undefined || appEui == null) {
        throw "Missing the required parameter 'appEui' when calling getAppDevDataPayload";
      }

      // verify the required parameter 'devEui' is set
      if (devEui == undefined || devEui == null) {
        throw "Missing the required parameter 'devEui' when calling getAppDevDataPayload";
      }


      var pathParams = {
        'appEui': appEui,
        'devEui': devEui
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['server_token', 'client_id'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [DataPayload];

      return this.apiClient.callApi(
        '/data/{appEui}/nodes/{devEui}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppDevLastDataTimestamp operation.
     * @callback module:api/DataApi~getAppDevLastDataTimestampCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAppDevLastDataTimestamp() - Gets last data timestamp for a given application and device.
     * This can only be done by the logged in users.
     * @param {String} appEui The appEui whom to get last timestamp
     * @param {String} devEui The devEui whom to get last timestamp
     * @param {module:api/DataApi~getAppDevLastDataTimestampCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'String'}
     */
    this.getAppDevLastDataTimestamp = function(appEui, devEui, callback) {
      var postBody = null;

      // verify the required parameter 'appEui' is set
      if (appEui == undefined || appEui == null) {
        throw "Missing the required parameter 'appEui' when calling getAppDevLastDataTimestamp";
      }

      // verify the required parameter 'devEui' is set
      if (devEui == undefined || devEui == null) {
        throw "Missing the required parameter 'devEui' when calling getAppDevLastDataTimestamp";
      }


      var pathParams = {
        'appEui': appEui,
        'devEui': devEui
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['server_token', 'client_id'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/data/{appEui}/nodes/{devEui}/timestamp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppDevLatestCounter operation.
     * @callback module:api/DataApi~getAppDevLatestCounterCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAppDevLatestCounter() - Gets the latest counter for a given application and device.
     * This can only be done by the logged in users.
     * @param {String} appEui The appEui whom to get last timestamp
     * @param {String} devEui The devEui whom to get last timestamp
     * @param {module:api/DataApi~getAppDevLatestCounterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'Integer'}
     */
    this.getAppDevLatestCounter = function(appEui, devEui, callback) {
      var postBody = null;

      // verify the required parameter 'appEui' is set
      if (appEui == undefined || appEui == null) {
        throw "Missing the required parameter 'appEui' when calling getAppDevLatestCounter";
      }

      // verify the required parameter 'devEui' is set
      if (devEui == undefined || devEui == null) {
        throw "Missing the required parameter 'devEui' when calling getAppDevLatestCounter";
      }


      var pathParams = {
        'appEui': appEui,
        'devEui': devEui
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['server_token', 'client_id'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/data/{appEui}/nodes/{devEui}/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppLastDataMethod operation.
     * @callback module:api/DataApi~getAppLastDataMethodCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAppLastDataMethod() - Gets last data delivery method for a given application.
     * This can only be done by the logged in users.
     * @param {String} appEui The appEui whom to get last timestamp
     * @param {module:api/DataApi~getAppLastDataMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'String'}
     */
    this.getAppLastDataMethod = function(appEui, callback) {
      var postBody = null;

      // verify the required parameter 'appEui' is set
      if (appEui == undefined || appEui == null) {
        throw "Missing the required parameter 'appEui' when calling getAppLastDataMethod";
      }


      var pathParams = {
        'appEui': appEui
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['server_token', 'client_id'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/data/{appEui}/method', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppLastDataTimestamp operation.
     * @callback module:api/DataApi~getAppLastDataTimestampCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAppLastDataTimestamp() - Gets last data timestamp for a given application.
     * This can only be done by the logged in users.
     * @param {String} appEui The appEui whom to get last timestamp
     * @param {module:api/DataApi~getAppLastDataTimestampCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'String'}
     */
    this.getAppLastDataTimestamp = function(appEui, callback) {
      var postBody = null;

      // verify the required parameter 'appEui' is set
      if (appEui == undefined || appEui == null) {
        throw "Missing the required parameter 'appEui' when calling getAppLastDataTimestamp";
      }


      var pathParams = {
        'appEui': appEui
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['server_token', 'client_id'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/data/{appEui}/timestamp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
