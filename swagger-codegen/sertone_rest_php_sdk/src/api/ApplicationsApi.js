/**
 * SERTONE REST API
 * This is the SERTONE REST API server for the  Sertone IOT Developers.  You can find out more about IOT at [http://www.sertone.com](http://www.sertone.com) or about the API on [API Reference](http://dev.sertone.com/public-rest-api).
 *
 * OpenAPI spec version: 0.0.1
 * Contact: email@sertone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Applications'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Applications'));
  } else {
    // Browser globals (root is window)
    if (!root.SertoneRestApi) {
      root.SertoneRestApi = {};
    }
    root.SertoneRestApi.ApplicationsApi = factory(root.SertoneRestApi.ApiClient, root.SertoneRestApi.Applications);
  }
}(this, function(ApiClient, Applications) {
  'use strict';

  /**
   * Applications service.
   * @module api/ApplicationsApi
   * @version 0.0.1
   */

  /**
   * Constructs a new ApplicationsApi. 
   * @alias module:api/ApplicationsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getApplicationsByUserId operation.
     * @callback module:api/ApplicationsApi~getApplicationsByUserIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Applications>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getApplicationsByUserId() - Gets all applications owned by given user.
     * 
     * @param {String} userId The userId whom to get owned applications
     * @param {module:api/ApplicationsApi~getApplicationsByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Applications>}
     */
    this.getApplicationsByUserId = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getApplicationsByUserId";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['server_token', 'client_id'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Applications];

      return this.apiClient.callApi(
        '/users/{userId}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationsByUserIdAndAppId operation.
     * @callback module:api/ApplicationsApi~getApplicationsByUserIdAndAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Applications} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getApplicationsByUserIdAndAppId() - Gets details of given application ID for this given user.
     * 
     * @param {String} userId The userId where application will be retrieved
     * @param {String} appEui The applicationId to be retrieved
     * @param {module:api/ApplicationsApi~getApplicationsByUserIdAndAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Applications}
     */
    this.getApplicationsByUserIdAndAppId = function(userId, appEui, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getApplicationsByUserIdAndAppId";
      }

      // verify the required parameter 'appEui' is set
      if (appEui == undefined || appEui == null) {
        throw "Missing the required parameter 'appEui' when calling getApplicationsByUserIdAndAppId";
      }


      var pathParams = {
        'userId': userId,
        'appEui': appEui
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['server_token', 'client_id'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Applications;

      return this.apiClient.callApi(
        '/users/{userId}/applications/{appEui}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
