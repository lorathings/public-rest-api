<?php
/**
 * NodeInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SERTONE REST API
 *
 * This is the SERTONE REST API server for the  Sertone IOT Developers.  You can find out more about IOT at [http://www.sertone.com](http://www.sertone.com) or about the API on [API Reference](http://dev.sertone.com/public-rest-api).
 *
 * OpenAPI spec version: 0.0.1
 * Contact: email@sertone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * NodeInfo Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NodeInfo implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'NodeInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'reg_type' => 'string',
        'dev_eui' => 'string',
        'app_eui' => 'string',
        'app_key' => 'string',
        'app_s_key' => 'string',
        'dev_addr' => 'string',
        'nwk_s_key' => 'string',
        'fcnt_up' => 'int',
        'fcnt_down' => 'int',
        'flags' => 'string',
        'activated' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'reg_type' => 'regType',
        'dev_eui' => 'devEui',
        'app_eui' => 'appEui',
        'app_key' => 'appKey',
        'app_s_key' => 'appSKey',
        'dev_addr' => 'devAddr',
        'nwk_s_key' => 'nwkSKey',
        'fcnt_up' => 'fcntUp',
        'fcnt_down' => 'fcntDown',
        'flags' => 'flags',
        'activated' => 'activated'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'reg_type' => 'setRegType',
        'dev_eui' => 'setDevEui',
        'app_eui' => 'setAppEui',
        'app_key' => 'setAppKey',
        'app_s_key' => 'setAppSKey',
        'dev_addr' => 'setDevAddr',
        'nwk_s_key' => 'setNwkSKey',
        'fcnt_up' => 'setFcntUp',
        'fcnt_down' => 'setFcntDown',
        'flags' => 'setFlags',
        'activated' => 'setActivated'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'reg_type' => 'getRegType',
        'dev_eui' => 'getDevEui',
        'app_eui' => 'getAppEui',
        'app_key' => 'getAppKey',
        'app_s_key' => 'getAppSKey',
        'dev_addr' => 'getDevAddr',
        'nwk_s_key' => 'getNwkSKey',
        'fcnt_up' => 'getFcntUp',
        'fcnt_down' => 'getFcntDown',
        'flags' => 'getFlags',
        'activated' => 'getActivated'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reg_type'] = isset($data['reg_type']) ? $data['reg_type'] : null;
        $this->container['dev_eui'] = isset($data['dev_eui']) ? $data['dev_eui'] : null;
        $this->container['app_eui'] = isset($data['app_eui']) ? $data['app_eui'] : null;
        $this->container['app_key'] = isset($data['app_key']) ? $data['app_key'] : null;
        $this->container['app_s_key'] = isset($data['app_s_key']) ? $data['app_s_key'] : null;
        $this->container['dev_addr'] = isset($data['dev_addr']) ? $data['dev_addr'] : null;
        $this->container['nwk_s_key'] = isset($data['nwk_s_key']) ? $data['nwk_s_key'] : null;
        $this->container['fcnt_up'] = isset($data['fcnt_up']) ? $data['fcnt_up'] : null;
        $this->container['fcnt_down'] = isset($data['fcnt_down']) ? $data['fcnt_down'] : null;
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
        $this->container['activated'] = isset($data['activated']) ? $data['activated'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets reg_type
     * @return string
     */
    public function getRegType()
    {
        return $this->container['reg_type'];
    }

    /**
     * Sets reg_type
     * @param string $reg_type Registration Type - OTAA or ABP
     * @return $this
     */
    public function setRegType($reg_type)
    {
        $this->container['reg_type'] = $reg_type;

        return $this;
    }

    /**
     * Gets dev_eui
     * @return string
     */
    public function getDevEui()
    {
        return $this->container['dev_eui'];
    }

    /**
     * Sets dev_eui
     * @param string $dev_eui
     * @return $this
     */
    public function setDevEui($dev_eui)
    {
        $this->container['dev_eui'] = $dev_eui;

        return $this;
    }

    /**
     * Gets app_eui
     * @return string
     */
    public function getAppEui()
    {
        return $this->container['app_eui'];
    }

    /**
     * Sets app_eui
     * @param string $app_eui
     * @return $this
     */
    public function setAppEui($app_eui)
    {
        $this->container['app_eui'] = $app_eui;

        return $this;
    }

    /**
     * Gets app_key
     * @return string
     */
    public function getAppKey()
    {
        return $this->container['app_key'];
    }

    /**
     * Sets app_key
     * @param string $app_key
     * @return $this
     */
    public function setAppKey($app_key)
    {
        $this->container['app_key'] = $app_key;

        return $this;
    }

    /**
     * Gets app_s_key
     * @return string
     */
    public function getAppSKey()
    {
        return $this->container['app_s_key'];
    }

    /**
     * Sets app_s_key
     * @param string $app_s_key
     * @return $this
     */
    public function setAppSKey($app_s_key)
    {
        $this->container['app_s_key'] = $app_s_key;

        return $this;
    }

    /**
     * Gets dev_addr
     * @return string
     */
    public function getDevAddr()
    {
        return $this->container['dev_addr'];
    }

    /**
     * Sets dev_addr
     * @param string $dev_addr
     * @return $this
     */
    public function setDevAddr($dev_addr)
    {
        $this->container['dev_addr'] = $dev_addr;

        return $this;
    }

    /**
     * Gets nwk_s_key
     * @return string
     */
    public function getNwkSKey()
    {
        return $this->container['nwk_s_key'];
    }

    /**
     * Sets nwk_s_key
     * @param string $nwk_s_key
     * @return $this
     */
    public function setNwkSKey($nwk_s_key)
    {
        $this->container['nwk_s_key'] = $nwk_s_key;

        return $this;
    }

    /**
     * Gets fcnt_up
     * @return int
     */
    public function getFcntUp()
    {
        return $this->container['fcnt_up'];
    }

    /**
     * Sets fcnt_up
     * @param int $fcnt_up
     * @return $this
     */
    public function setFcntUp($fcnt_up)
    {
        $this->container['fcnt_up'] = $fcnt_up;

        return $this;
    }

    /**
     * Gets fcnt_down
     * @return int
     */
    public function getFcntDown()
    {
        return $this->container['fcnt_down'];
    }

    /**
     * Sets fcnt_down
     * @param int $fcnt_down
     * @return $this
     */
    public function setFcntDown($fcnt_down)
    {
        $this->container['fcnt_down'] = $fcnt_down;

        return $this;
    }

    /**
     * Gets flags
     * @return string
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     * @param string $flags
     * @return $this
     */
    public function setFlags($flags)
    {
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets activated
     * @return bool
     */
    public function getActivated()
    {
        return $this->container['activated'];
    }

    /**
     * Sets activated
     * @param bool $activated
     * @return $this
     */
    public function setActivated($activated)
    {
        $this->container['activated'] = $activated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
