<?php
/**
 * GatewaysStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SERTONE REST API
 *
 * This is the SERTONE REST API server for the  Sertone IOT Developers.  You can find out more about IOT at [http://www.sertone.com](http://www.sertone.com) or about the API on [API Reference](http://dev.sertone.com/public-rest-api).
 *
 * OpenAPI spec version: 0.0.1
 * Contact: email@sertone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GatewaysStatus Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GatewaysStatus implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GatewaysStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'gateway_eui' => 'string',
        'gateway_activity' => 'string',
        'last_pull_data' => 'string',
        'last_push_data' => 'string',
        'pull_data_count' => 'string',
        'push_data_count' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'gateway_eui' => 'gateway_eui',
        'gateway_activity' => 'gateway_activity',
        'last_pull_data' => 'last_pull_data',
        'last_push_data' => 'last_push_data',
        'pull_data_count' => 'pull_data_count',
        'push_data_count' => 'push_data_count'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'gateway_eui' => 'setGatewayEui',
        'gateway_activity' => 'setGatewayActivity',
        'last_pull_data' => 'setLastPullData',
        'last_push_data' => 'setLastPushData',
        'pull_data_count' => 'setPullDataCount',
        'push_data_count' => 'setPushDataCount'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'gateway_eui' => 'getGatewayEui',
        'gateway_activity' => 'getGatewayActivity',
        'last_pull_data' => 'getLastPullData',
        'last_push_data' => 'getLastPushData',
        'pull_data_count' => 'getPullDataCount',
        'push_data_count' => 'getPushDataCount'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gateway_eui'] = isset($data['gateway_eui']) ? $data['gateway_eui'] : null;
        $this->container['gateway_activity'] = isset($data['gateway_activity']) ? $data['gateway_activity'] : null;
        $this->container['last_pull_data'] = isset($data['last_pull_data']) ? $data['last_pull_data'] : null;
        $this->container['last_push_data'] = isset($data['last_push_data']) ? $data['last_push_data'] : null;
        $this->container['pull_data_count'] = isset($data['pull_data_count']) ? $data['pull_data_count'] : null;
        $this->container['push_data_count'] = isset($data['push_data_count']) ? $data['push_data_count'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets gateway_eui
     * @return string
     */
    public function getGatewayEui()
    {
        return $this->container['gateway_eui'];
    }

    /**
     * Sets gateway_eui
     * @param string $gateway_eui
     * @return $this
     */
    public function setGatewayEui($gateway_eui)
    {
        $this->container['gateway_eui'] = $gateway_eui;

        return $this;
    }

    /**
     * Gets gateway_activity
     * @return string
     */
    public function getGatewayActivity()
    {
        return $this->container['gateway_activity'];
    }

    /**
     * Sets gateway_activity
     * @param string $gateway_activity Gateway activity can be Active, Inactive, Not Found
     * @return $this
     */
    public function setGatewayActivity($gateway_activity)
    {
        $this->container['gateway_activity'] = $gateway_activity;

        return $this;
    }

    /**
     * Gets last_pull_data
     * @return string
     */
    public function getLastPullData()
    {
        return $this->container['last_pull_data'];
    }

    /**
     * Sets last_pull_data
     * @param string $last_pull_data
     * @return $this
     */
    public function setLastPullData($last_pull_data)
    {
        $this->container['last_pull_data'] = $last_pull_data;

        return $this;
    }

    /**
     * Gets last_push_data
     * @return string
     */
    public function getLastPushData()
    {
        return $this->container['last_push_data'];
    }

    /**
     * Sets last_push_data
     * @param string $last_push_data
     * @return $this
     */
    public function setLastPushData($last_push_data)
    {
        $this->container['last_push_data'] = $last_push_data;

        return $this;
    }

    /**
     * Gets pull_data_count
     * @return string
     */
    public function getPullDataCount()
    {
        return $this->container['pull_data_count'];
    }

    /**
     * Sets pull_data_count
     * @param string $pull_data_count
     * @return $this
     */
    public function setPullDataCount($pull_data_count)
    {
        $this->container['pull_data_count'] = $pull_data_count;

        return $this;
    }

    /**
     * Gets push_data_count
     * @return string
     */
    public function getPushDataCount()
    {
        return $this->container['push_data_count'];
    }

    /**
     * Sets push_data_count
     * @param string $push_data_count
     * @return $this
     */
    public function setPushDataCount($push_data_count)
    {
        $this->container['push_data_count'] = $push_data_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
