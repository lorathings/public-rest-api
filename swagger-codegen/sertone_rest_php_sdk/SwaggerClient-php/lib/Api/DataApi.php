<?php
/**
 * DataApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SERTONE REST API
 *
 * This is the SERTONE REST API server for the  Sertone IOT Developers.  You can find out more about IOT at [http://www.sertone.com](http://www.sertone.com) or about the API on [API Reference](http://dev.sertone.com/public-rest-api).
 *
 * OpenAPI spec version: 0.0.1
 * Contact: email@sertone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * DataApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://api.dds.sertone.com/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DataApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getAppDevDataPayload
     *
     * getAppDevDataPayload() - Gets payload data of given application and device..
     *
     * @param string $app_eui The appEui where payload will be retrieved (required)
     * @param string $dev_eui The devEui where payload will be retrieved (required)
     *
     * @return \Swagger\Client\Model\DataPayload[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAppDevDataPayload($app_eui, $dev_eui)
    {
        list($response) = $this->getAppDevDataPayloadWithHttpInfo($app_eui, $dev_eui);
        return $response;
    }


    /**
     * Operation getAppDevDataPayloadWithHttpInfo
     *
     * getAppDevDataPayload() - Gets payload data of given application and device..
     *
     * @param string $app_eui The appEui where payload will be retrieved (required)
     * @param string $dev_eui The devEui where payload will be retrieved (required)
     *
     * @return Array of \Swagger\Client\Model\DataPayload[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAppDevDataPayloadWithHttpInfo($app_eui, $dev_eui)
    {
        
        // verify the required parameter 'app_eui' is set
        if ($app_eui === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_eui when calling getAppDevDataPayload');
        }

        // verify the required parameter 'dev_eui' is set
        if ($dev_eui === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dev_eui when calling getAppDevDataPayload');
        }

        // parse inputs
        $resourcePath = "/data/{appEui}/nodes/{devEui}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','application/json'));

        
        
        // path params
        if ($app_eui !== null) {
            $resourcePath = str_replace(
                "{" . "appEui" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_eui),
                $resourcePath
            );
        }// path params
        if ($dev_eui !== null) {
            $resourcePath = str_replace(
                "{" . "devEui" . "}",
                $this->apiClient->getSerializer()->toPathValue($dev_eui),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        

        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ClientID');
        if (strlen($apiKey) !== 0) {
            $headerParams['ClientID'] = $apiKey;
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DataPayload[]'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DataPayload[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DataPayload[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getAppDevLastDataTimestamp
     *
     * getAppDevLastDataTimestamp() - Gets last data timestamp for a given application and device..
     *
     * @param string $app_eui The appEui whom to get last timestamp (required)
     * @param string $dev_eui The devEui whom to get last timestamp (required)
     *
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAppDevLastDataTimestamp($app_eui, $dev_eui)
    {
        list($response) = $this->getAppDevLastDataTimestampWithHttpInfo($app_eui, $dev_eui);
        return $response;
    }


    /**
     * Operation getAppDevLastDataTimestampWithHttpInfo
     *
     * getAppDevLastDataTimestamp() - Gets last data timestamp for a given application and device..
     *
     * @param string $app_eui The appEui whom to get last timestamp (required)
     * @param string $dev_eui The devEui whom to get last timestamp (required)
     *
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAppDevLastDataTimestampWithHttpInfo($app_eui, $dev_eui)
    {
        
        // verify the required parameter 'app_eui' is set
        if ($app_eui === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_eui when calling getAppDevLastDataTimestamp');
        }

        // verify the required parameter 'dev_eui' is set
        if ($dev_eui === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dev_eui when calling getAppDevLastDataTimestamp');
        }

        // parse inputs
        $resourcePath = "/data/{appEui}/nodes/{devEui}/timestamp";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','application/json'));

        
        
        // path params
        if ($app_eui !== null) {
            $resourcePath = str_replace(
                "{" . "appEui" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_eui),
                $resourcePath
            );
        }// path params
        if ($dev_eui !== null) {
            $resourcePath = str_replace(
                "{" . "devEui" . "}",
                $this->apiClient->getSerializer()->toPathValue($dev_eui),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        

        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ClientID');
        if (strlen($apiKey) !== 0) {
            $headerParams['ClientID'] = $apiKey;
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getAppDevLatestCounter
     *
     * getAppDevLatestCounter() - Gets the latest counter for a given application and device..
     *
     * @param string $app_eui The appEui whom to get last timestamp (required)
     * @param string $dev_eui The devEui whom to get last timestamp (required)
     *
     * @return int
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAppDevLatestCounter($app_eui, $dev_eui)
    {
        list($response) = $this->getAppDevLatestCounterWithHttpInfo($app_eui, $dev_eui);
        return $response;
    }


    /**
     * Operation getAppDevLatestCounterWithHttpInfo
     *
     * getAppDevLatestCounter() - Gets the latest counter for a given application and device..
     *
     * @param string $app_eui The appEui whom to get last timestamp (required)
     * @param string $dev_eui The devEui whom to get last timestamp (required)
     *
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAppDevLatestCounterWithHttpInfo($app_eui, $dev_eui)
    {
        
        // verify the required parameter 'app_eui' is set
        if ($app_eui === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_eui when calling getAppDevLatestCounter');
        }

        // verify the required parameter 'dev_eui' is set
        if ($dev_eui === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dev_eui when calling getAppDevLatestCounter');
        }

        // parse inputs
        $resourcePath = "/data/{appEui}/nodes/{devEui}/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','application/json'));

        
        
        // path params
        if ($app_eui !== null) {
            $resourcePath = str_replace(
                "{" . "appEui" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_eui),
                $resourcePath
            );
        }// path params
        if ($dev_eui !== null) {
            $resourcePath = str_replace(
                "{" . "devEui" . "}",
                $this->apiClient->getSerializer()->toPathValue($dev_eui),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        

        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ClientID');
        if (strlen($apiKey) !== 0) {
            $headerParams['ClientID'] = $apiKey;
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getAppLastDataMethod
     *
     * getAppLastDataMethod() - Gets last data delivery method for a given application..
     *
     * @param string $app_eui The appEui whom to get last timestamp (required)
     *
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAppLastDataMethod($app_eui)
    {
        list($response) = $this->getAppLastDataMethodWithHttpInfo($app_eui);
        return $response;
    }


    /**
     * Operation getAppLastDataMethodWithHttpInfo
     *
     * getAppLastDataMethod() - Gets last data delivery method for a given application..
     *
     * @param string $app_eui The appEui whom to get last timestamp (required)
     *
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAppLastDataMethodWithHttpInfo($app_eui)
    {
        
        // verify the required parameter 'app_eui' is set
        if ($app_eui === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_eui when calling getAppLastDataMethod');
        }

        // parse inputs
        $resourcePath = "/data/{appEui}/method";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','application/json'));

        
        
        // path params
        if ($app_eui !== null) {
            $resourcePath = str_replace(
                "{" . "appEui" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_eui),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        

        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ClientID');
        if (strlen($apiKey) !== 0) {
            $headerParams['ClientID'] = $apiKey;
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getAppLastDataTimestamp
     *
     * getAppLastDataTimestamp() - Gets last data timestamp for a given application..
     *
     * @param string $app_eui The appEui whom to get last timestamp (required)
     *
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAppLastDataTimestamp($app_eui)
    {
        list($response) = $this->getAppLastDataTimestampWithHttpInfo($app_eui);
        return $response;
    }


    /**
     * Operation getAppLastDataTimestampWithHttpInfo
     *
     * getAppLastDataTimestamp() - Gets last data timestamp for a given application..
     *
     * @param string $app_eui The appEui whom to get last timestamp (required)
     *
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAppLastDataTimestampWithHttpInfo($app_eui)
    {
        
        // verify the required parameter 'app_eui' is set
        if ($app_eui === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_eui when calling getAppLastDataTimestamp');
        }

        // parse inputs
        $resourcePath = "/data/{appEui}/timestamp";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','application/json'));

        
        
        // path params
        if ($app_eui !== null) {
            $resourcePath = str_replace(
                "{" . "appEui" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_eui),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        

        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ClientID');
        if (strlen($apiKey) !== 0) {
            $headerParams['ClientID'] = $apiKey;
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
